x <- 1
print(x)
x
msg <- "hello"
x <- 5
x
x <- 1:20
x
print(x)
x <- c(1+3i, 4+6i)
x
x <- vector("complex", 20)
x
y <- (1.7,"a")
y <- c(2, TRUE)
y <- c(1.7,"a")
y <- c(1+i,2.3, "a",FALSE)
y <- c(1+2i,2.3, "a",FALSE)
z <- 13:20
as.complex(z)
m <= matrix(3,5)
m <- matrix(3,5)
m
m <- matrix(nrow =2,ncol = 5)
m
dim(m)
attributes(m)
m <- matrix(1:20,nrow =2,ncol = 5)
m
dim(m) <- (5,2)
dim(m) <- c(5,2)
m
x <- c(1+i,2+i,3+2i)
x <- 1:10
y <- 20:25
cbind(x,y)
rbind(x,y)
x <- list(1+3,2.34,"hello", FALSE)
x
x <- list(1+3i,2.34,"hello", FALSE)
x
gender <- factor(c("Male","Male","Female","Other"))
gender
table(gender)
unclass(gender)
frame <- data.frame(foo <- c(1,2,3,4), bar <- c(1+i,2+2i,3+3i,4+i))
frame <- data.frame(foo <- c(1,2,3,4), bar <- c(T,T,T,F))
frame
frame <- data.frame(foo = c(1,2,3,4), bar = c(T,T,T,F))
frame
x
names(x)
names(x) <- c("foo","bar",norf","sorf)
names(x) <- c("foo","bar",norf","sorf"")
names(x) <- c("foo","bar",norf","sorf")
x <- rnorm(10)
x
x <- rnorm(10,20,2)
x
set.seed(20)
e <- rnorm(100,0,1)
x <- 1:100
y <- 1.5 - 3*x + e
plat(x,y)
plot(x,y)
e <- rnorm(100,0,50)
plot(x,y)
y <- 1.5 - 3*x + e
plot(x,y)
dev.off()
hist(y)
x <- rnorm(100)
y <- x + rnorm(100)
par(las = 1)
plot(x, y)
par(las = 2)
plot(x,y)
par(las = 1)
plot(x,y)
x <- rnorm(100)
y <- x + rnorm(100)
plot(x, y)
x1 <- rnorm(10)
y1 <- rnorm(10)
points(x1, y1, col = "red")
pdf(file = "testRplot.pdf")
x <- rnorm(100)
hist(x)
dev.off()
dev.list()
library(xlsx)
a <- available.packages()
head(a)
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
library("jsonlite")
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsondata)
names(json$name)
names(jsondata$name)
content(jsondata$name)
jsondata(jsondata$name=="datasharing")
jsondata[jsondata$name=="datasharing",]
jsondata[jsondata$name=="datasharing",45]
?print.trllis
?print.trellis
library(lattice)
?print.trellis
?par
?splom
?trellis.par.set
library(datasets)
data(airquality)
library(ggplot2)
library(ggplot)
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
sp <- sqrt((10 * 0.68^2 + 10 * 0.6^2) / (10 + 10 - 2))
-2 + c(-1,1) * qt(0.975,18) * sp * (2/10)^0.5
sp <- sqrt((9 * 0.68^2 + 9 * 0.6^2) / (10 + 10 - 2))
-2 + c(-1,1) * qt(0.975,18) * sp * (2/10)^0.5
-2 + c(-1,1) * qt(0.975,18) * (sp * (2/10))^0.5
sp <- sqrt((99 * 0.5^2 + 99 * 2^2) / (100 + 100 - 2))
2 + c(-1,1) * qt(0.975,198) * (sp * (2/100))^0.5
sp <- sqrt((8 * 1.5^2 + 8 * 1.8^2) / (9 + 9 - 2))
-4 + c(-1,1) * qt(0.975,16) * (sp * 2/9)^0.5
1100 + c(1,-1) * qt(0.975,8) * 30 / sqrt(8)
6/qt(0.975,8)
x <- c(0.18,0.18, -1.54, 0.42,0.42,0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1 <- sum(x*y)/sum(x^2)
beta1
cars <- data(mtcars)
cars
str(cars)
package(datasets)
install.packages("datasets")
mtcars
lm(mtcars$mpg ~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x_norm <- (x - mean(x))/sd(x)
x_norm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
library(manipulate)
manipulate(plot(1:x),x = slider(1,100))
manipulate(plot(1:100),x = slider(1,100))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
?dt
dt(0.975,8)
dt(0.975,9)
dt(0.95,8)
lm(y ~ x)
?lm
fit <- lm(y~x)
str(fit)
coef(fit)
summary(fit)
data(mtcars)
mtcars
fit <- lm(mpg ~ wt)
fit <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit)
fmpg <- 37.2851 - 5.3445 * mean(mtcars$wt)
fmpg
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
str(mtcars)
?predict
e <- mtcars$mpg - 37.2851 - 5.3445 * mtcars$wt
e
sigma <- sqrt(sum(e^2) / 30)
sigma
fmpg - sigma * 1.96 * sqrt(33/32)
fmpg
e <- mtcars$mpg - 37.2851 + 5.3445 * mtcars$wt
e
sigma <- sqrt(sum(e^2) / 30)
sigma
fmpg - sigma * 1.96 * sqrt(33/32)
mtcars
fmpg <- 37.2851 - 5.3445 * 3
fmpg
mtcars$short <- mtcars$wt/2
mtcars
fit <- lm(mpg ~ short)
fit <- lm(mtcars$mpg ~ mtcars$short)
summary(fit)
?mtcars
library(MASS)
data(shuttle)
shuttle
logShuttle <- glm(shuttle$auto ~ shuttle$wind,family="binomial")
logShuttle <- glm(shuttle$use ~ shuttle$wind,family="binomial")
summary(logShuttle)
exp(logShuttle$coeff)
logShuttle <- glm(shuttle$use ~ shuttle$wind + shuttle$magn,family="binomial")
summary(logShuttle)
exp(logShuttle$coeff)
logShuttle <- glm(shuttle$use ~ shuttle$wind,family="binomial")
summary(logShuttle)
logShuttle <- glm(I(1-shuttle$use) ~ shuttle$wind,family="binomial")
logShuttle <- glm(I(1-as.numeric(shuttle$use)) ~ shuttle$wind,family="binomial")
logShuttle <- glm(I(-shuttle$use) ~ shuttle$wind,family="binomial")
logShuttle <- glm(I(1-shuttle$use) ~ shuttle$wind,family="binomial")
data(InsectSprays)
InsectSprays
pspray <- glm(InsectSprays$count ~ factor(InsectSprays$spray),family="Poisson")
pspray <- glm(InsectSprays$count ~ factor(InsectSprays$spray),family="poisson")
summary(pspray)
exp(2.659)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- seq(-5,5,length = 2)
knots
knots <- seq(-5,5,length = 10)
knots
knots <- seq(-5,5,length = 11)
knots
exp(0.5588-2.674)
exp(2.674-0.5588)
data(mtcars)
mtcars
plot(mtcars$cyl,mtcars$mpg)
plot(mtcars$disp,mtcars$mpg)
plot(mtcars$hp,mtcars$mpg)
plot(mtcars$drat,mtcars$mpg)
plot(mtcars$wt,mtcars$mpg)
plot(mtcars$qsec,mtcars$mpg)
plot(mtcars$vs,mtcars$mpg)
plot(mtcars$am,mtcars$mpg)
plot(mtcars$gear,mtcars$mpg)
plot(mtcars$carb,mtcars$mpg)
plot(mtcars$am,mtcars$mpg)
str(mtcars)
fit <- lm(mtcars$mpg ~.)
fit <- lm(mpg ~., data = mtcars)
summary(fit)
fit <- lm(mpg ~ wt + am, data = mtcars)
summary(fit)
fit <- lm(mpg ~ wt, data = mtcars[am=0])
fit <- lm(mpg ~ wt, data = mtcars[am==0,])
fit <- lm(mpg ~ wt, data = mtcars[mtcars$am==0,])
summary(fit)
fit <- lm(mpg ~ wt, data = mtcars[mtcars$am==1,])
summary(fit)
?mtcars
fit <- lm(mpg ~ am, data = mtcars)
summary(fit)
fit <- aov(mpg ~ .,data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + disp + wt + am ,data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + wt + am ,data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + am ,data = mtcars)
summary(fit)
fit <- lm(mpg ~ wt + am ,data = mtcars)
summary(fit)
?mtcars
?resid
plot(fitted(fit),residual(fit))
plot(fitted(fit),resid(fit))
abline(h=0)
fit <- lm(mpg ~ cyl + wt + am ,data = mtcars)
plot(fitted(fit),resid(fit))
abline(h=0)
plot(fitted(fit),resid(fit),type="l
")
plot(fitted(fit),resid(fit),type="b")
plot(fitted(fit),resid(fit),type="l")
plot(fitted(fit),resid(fit),type="c")
plot(fitted(fit),resid(fit),type="a")
plot(fitted(fit),resid(fit),type="d")
plot(fitted(fit),resid(fit),type="e")
plot(fitted(fit),resid(fit),type="loess")
anova <- aov(mpg ~ cyl*wt*disp*am, data = mtcars)
summary(anova)
fit <- lm(mpg ~ cyl + wt + cyl*disp + wt*am + am, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + wt + cyl*disp + wt*am, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + wt + cyl*wt + wt*am, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + wt + am, data = mtcars)
summary(fit)
data(mtcars)
analysis <- aov(mpg ~ ., data=mtcars)
summary(analysis)
lm1 <- lm(mpg ~ cyl + disp + wt + am,data = mtcars)
summary(lm1)
lm1 <- lm(mpg ~ cyl + wt + am,data = mtcars)
summary(lm1)
render
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
plot(CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$FlyAsh)
plot(training$Age)
plot(training$Water)
plot(training$Superplasticizer)
plot(training$CoarseAggregate)
plot(training$FineAggregate)
plot(log(training$Superplasticizer+1))
hist(log(training$Superplasticizer+1))
hist(training$Superplasticizer)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
str(training)
Model <- train(diagnosis ~ IL_11 + IL_13 + IL_16+ IL_17e + il_1alpha + IL_3 + IL_4 + IL_5 +IL_6 +IL_6_Receptor + IL_7 + IL_8, data=training, preProcess = "pca", method ="glm")
Model <- train(diagnosis ~ IL_11 + IL_13 + IL_16+ IL_17E + il_1alpha + IL_3 + IL_4 + IL_5 +IL_6 +IL_6_Receptor + IL_7 + IL_8, data=training, preProcess = "pca", method ="glm")
Model <- train(diagnosis ~ IL_11 + IL_13 + IL_16+ IL_17e + IL_1alpha + IL_3 + IL_4 + IL_5 +IL_6 +IL_6_Receptor + IL_7 + IL_8, data=training, preProcess = "pca", method ="glm")
Model <- train(diagnosis ~ IL_11 + IL_13 + IL_16+ IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 +IL_6 +IL_6_Receptor + IL_7 + IL_8, data=training, preProcess = "pca", method ="glm")
install.packages("e1071")
Model <- train(diagnosis ~ IL_11 + IL_13 + IL_16+ IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 +IL_6 +IL_6_Receptor + IL_7 + IL_8, data=training, preProcess = "pca", method ="glm")
Model
names(training)
M <- abs(cor(training[,58:69]))
diag(M) <- 0
which(M>0.8,arr.ind=T)
M
?preProcess
preProc <- preProcess(training[,58:69], method="pca", pcaComp = 2)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ ., method="glm", data = trainPC)
modelFit
preProc <- preProcess(training[,58:69], method="pca", pcaComp = 12)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ ., method="glm", data = trainPC)
modelFit
names(training)
preProc <- preProcess(training[,-1], method="pca")
str(train)
str(training)
preProc <- preProcess(training[,58:69], method="pca")
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ ., method="glm", data = trainPC)
modelFit
testFit <- train(training$diagnosis ~ training[,58:69], method="glm")
all <- training[,58:69]
modelFit <- train(training$diagnosis ~ ., method="glm", data = all)
modelFit
confusionMatrix(testing$diagnosis, predict(modelFit,testing))
screeplot(modelfit)
screeplot(modelFit)
princomp(modelFit)
?train
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
train <- segmentationOriginal[Case == "Train",]
train <- segmentationOriginal[segmentationOriginal$Case == "Train",]
test <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=train)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
install.packages("plm")
library(pgmm)
library(pgmm)
library(plm)
data(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
set.seed(13234)
?lm
?train
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,type = "lm")
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,type = "lm",data = trainSA)
summary(modFit)
summary(modFit$finalModel)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,type = "lm",data = trainSA)
summary(modFit$finalModel)
lml <- lm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA)
summary(lml)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,predict(lml,testSA$chd))
?predict
missClass(testSA$chd,predict(lml,testSA))
missClass(trainSA$chd,predict(lml,trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
str(vowel.train)
set.seed(33833)
modFit <- train(y ~., data = vowel.train, method="rf", prox=TRUE)
?varImp
varImp(modFit)
setwd("F:/Academic/Leaving the Rat race")
library(slidify)
author("presentation")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
